
function handlingCalls

    3.2. make deep copy of Data_Clumps_List and create CallsList{callsInSame, CallsGlob: [file path , class name ] , callsCount}

    3.3. iterate through the Data_Clumps_List
        3.3.1. iterate through the smellymethodGroup
        3.3.2. for each object in smellymethodGroup
            3.3.2.1 Iterate durch each file in projectFileList
                3.3.2.1.1 look for each call experssion in the class and check if the Identifer name is the same as method name 
                    3.3.2.1.1.1. check the class name if the same then increase the cllasInSame by 1
                    3.3.2.1.1.2. else store the the {class name , file path,CallsGlobCount} in CallsGlob once 
                            and fore each another call in the class increase only the CallsGlobCount by 1

            3.3.2.2. modify the smellymethodGroup method and add the callsList to it
                and update the callsList count to the cllasInSame+CallsGlob.CallsGlobCount
        

and here are the interfaces that been used

export interface MethodInfo {
  methodName: string;
  parameters: ParameterInfo[];
}

export interface ParameterInfo {
  name: string;
  type: string;
  value?: any;
}

export interface ClassInfo {
  className: string;
  filepath: string;
}

export interface NewClassInfo {
  className: string;
  filepath: string;
}

export interface SmellyMethods {
  methodInfo: MethodInfo;
  classInfo: ClassInfo;
  callsList?: CallsList;
  callsCount?: number;
}

export interface CallsList {
  callsInSame: number;
  callsGlob: GlobalCalls[];
}

export interface GlobalCalls {
  classInfo: ClassInfo;
  callsGlobCount: number;
}

export interface DataClumpsList {
  smellyMethods: SmellyMethods[];
}

// interface for a new class
export interface DataClass {
  className: string;
  parameters: ParameterInfo[];
  constructorCode: string;
  getterSetterCode: string;
  isPrivate: boolean;
  isExported: boolean;
}
